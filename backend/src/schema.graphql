type Query {
  items(query: String, id: ID): [Item!]!
  pictures(query: String, id: ID): [Picture!]!
  categories(query: String, id:ID): [Category!]!
}

type Mutation {
  createItem(data: CreateItemInput!, time: String!, pic: PictureInput, contact: ContactInput): Item!
  updateItem(data: UpdateItemInput!, time: TimeInput): Item!
  deleteItem(id: ID!): ID!
  createCategory(name: String!): Category!
}

input CreateItemInput {
  briefIntro: String!
  location: String!
  isMatch: ItemState!
  category: ID!
  description: String
}

input TimeInput {
  year: Int!
  month: Int!
  day: Int!
  hour: Int!
  minute: Int!
  second: Int
}

input PictureInput {
  DataURL: String!
  filename: String!
  lastModified: String!
}

input ContactInput {
  email: String
  facebook: String
  phoneNumber: String
  other: String
}

input UpdateItemInput {
  id: ID!
  briefIntro: String
  time: String
  location: String
  category: ID
  description: String
}

type Item {
  id: ID!
  briefIntro: String!
  time: Date!
  location: String!
  category: Category!
  description: String!
  pic: Picture
  contact: Contact
  isMatch: ItemState!
}

type Date {
  year: Int!
  month: Int!
  day: Int!
  hour: Int!
  minute: Int!
  second: Int
}

type Picture {
  id: ID!
  DataURL: String!
  filename: String!
  item: Item!
  lastModified: Date!
}

type Category {
  id: ID!
  name: String!
  items: [Item]!
}

type Contact {
  id: ID!
  item: Item!
  email: String
  facebook: String
  phoneNumber: String
  other: String
}

enum ItemState {
  NEED_TO_FIND
  IS_FOUND
  IS_MATCH
}